/*! For license information please see background.js.LICENSE.txt */
(()=>{function e(){var n,r,o="function"==typeof Symbol?Symbol:{},s=o.iterator||"@@iterator",a=o.toStringTag||"@@toStringTag";function i(e,o,s,a){var i=o&&o.prototype instanceof l?o:l,u=Object.create(i.prototype);return t(u,"_invoke",function(e,t,o){var s,a,i,l=0,u=o||[],f=!1,d={p:0,n:0,v:n,a:p,f:p.bind(n,4),d:function(e,t){return s=e,a=0,i=n,d.n=t,c}};function p(e,t){for(a=e,i=t,r=0;!f&&l&&!o&&r<u.length;r++){var o,s=u[r],p=d.p,h=s[2];e>3?(o=h===t)&&(i=s[(a=s[4])?5:(a=3,3)],s[4]=s[5]=n):s[0]<=p&&((o=e<2&&p<s[1])?(a=0,d.v=t,d.n=s[1]):p<h&&(o=e<3||s[0]>t||t>h)&&(s[4]=e,s[5]=t,d.n=h,a=0))}if(o||e>1)return c;throw f=!0,t}return function(o,u,h){if(l>1)throw TypeError("Generator is already running");for(f&&1===u&&p(u,h),a=u,i=h;(r=a<2?n:i)||!f;){s||(a?a<3?(a>1&&(d.n=-1),p(a,i)):d.n=i:d.v=i);try{if(l=2,s){if(a||(o="next"),r=s[o]){if(!(r=r.call(s,i)))throw TypeError("iterator result is not an object");if(!r.done)return r;i=r.value,a<2&&(a=0)}else 1===a&&(r=s.return)&&r.call(s),a<2&&(i=TypeError("The iterator does not provide a '"+o+"' method"),a=1);s=n}else if((r=(f=d.n<0)?i:e.call(t,d))!==c)break}catch(e){s=n,a=1,i=e}finally{l=1}}return{value:r,done:f}}}(e,s,a),!0),u}var c={};function l(){}function u(){}function f(){}r=Object.getPrototypeOf;var d=[][s]?r(r([][s]())):(t(r={},s,function(){return this}),r),p=f.prototype=l.prototype=Object.create(d);function h(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,f):(e.__proto__=f,t(e,a,"GeneratorFunction")),e.prototype=Object.create(p),e}return u.prototype=f,t(p,"constructor",f),t(f,"constructor",u),u.displayName="GeneratorFunction",t(f,a,"GeneratorFunction"),t(p),t(p,a,"Generator"),t(p,s,function(){return this}),t(p,"toString",function(){return"[object Generator]"}),(e=function(){return{w:i,m:h}})()}function t(e,n,r,o){var s=Object.defineProperty;try{s({},"",{})}catch(e){s=0}t=function(e,n,r,o){if(n)s?s(e,n,{value:r,enumerable:!o,configurable:!o,writable:!o}):e[n]=r;else{var a=function(n,r){t(e,n,function(e){return this._invoke(n,r,e)})};a("next",0),a("throw",1),a("return",2)}},t(e,n,r,o)}function n(e,t,n,r,o,s,a){try{var i=e[s](a),c=i.value}catch(e){return void n(e)}i.done?t(c):Promise.resolve(c).then(r,o)}function r(){var t;return t=e().m(function t(n){var r,o,s,a,i,c,l,u,f,d,p,h,m,y;return e().w(function(e){for(;;)switch(e.p=e.n){case 0:if(r=n.text,(o=n.config).GEMINI_API_KEY&&"YOUR_GEMINI_API_KEY"!==o.GEMINI_API_KEY){e.n=1;break}throw new Error("Gemini API key not configured");case 1:return s="",e.p=2,e.n=3,new Promise(function(e){return chrome.storage.local.get(["userCustomPrompt"],e)});case 3:(a=e.v).userCustomPrompt&&""!==a.userCustomPrompt.trim()&&(userInstruction="\n\nADDITIONAL USER CONTEXT: ".concat(a.userCustomPrompt.trim())),e.n=5;break;case 4:e.p=4,h=e.v,console.warn("Could not retrieve user prompt:",h);case 5:return i='\nYou are a privacy and security expert analyzing social media posts for potential privacy risks.\n\nTEXT TO ANALYZE: "'.concat(r,'"\n\nYour task is to:\n1. Identify ONLY words, phrases, or patterns that are truly sensitive, specific, and could realistically be used for harm (e.g., full addresses, SSNs, account numbers, specific medical diagnoses, full phone numbers, etc). Also include things the user maybe shouldn\'t say (threats, harrasment, racism, sexism), but don\'t be super sensitive.\n2. DO NOT flag general statements, feelings, vague references, or non-specific information (e.g., \'my medical life is good\', \'I feel happy\', \'I went to the doctor\', \'my address is in New York\', etc).\n3. If you are not at least 90% confident that the information is a real privacy risk, DO NOT flag it.\n4. For each risky element, explain WHY it is risky, HOW it could be exploited.\n5. When reasonable suggest safer alternative words or phrases. Give the user an exact phrase or word, but if that doesn\'t make sense, tell them maybe you could remove this or that or try to exclude this from your post. Keep this relatively straight to the point so as not to bore the reader. The issue should be comprehended within the first sentence. Give a maximum of four alternatives.\n\nIMPORTANT:\n- Err on the side of caution: If you are unsure, do NOT flag.\n- Only flag if the information is specific, sensitive, and could realistically be used for harm, identity theft, or fraud.\n- Do NOT flag general or vague statements about health, feelings, or life (e.g., \'my medical life is good\', \'I feel happy\', \'I have a condition\', etc).\n- Do NOT flag partial or non-specific information (e.g., \'my address is 66\' is NOT risky unless it is a full address).\n- Justify each risk with clear, concrete and concise reasoning and concise real-world examples of misuse.\n- DO NOT ADD THE RISK TO THE ALTERNATIVES, JUST ALTERNATIVE 1 AND 2, PLEASE DON\'T CONCATENATE THEM TOGETHER\n\nPlease respond with this EXACT JSON format (no additional text):\n{\n    "riskLevel": "LOW|MEDIUM|HIGH",\n    "confidence": 90,\n    "riskyElements": [\n        {\n            "text": "the risky word or phrase",\n            "type": "PERSONAL_INFO|FINANCIAL|MEDICAL|LOCATION|EMPLOYMENT|FAMILY|DATES|CREDENTIALS|CRITICAL|OTHER",\n            "risk": "Concise explanation of why this is risky and how it could be exploited",\n            "alternatives": ["safer alternative 1", "safer alternative 2", "safer alternative 3", "safer alternative 4"],\n            "severity": "LOW|MEDIUM|HIGH"\n        }\n    ],\n    "overallConcerns": ["short list of main privacy concerns"],\n    "recommendations": ["short list of general recommendations"],\n    "detectedKeywords": ["short list of all risky words/phrases found"]\n}\n\nIf no risks are found, return:\n{\n    "riskLevel": "LOW",\n    "confidence": 95,\n    "riskyElements": [],\n    "overallConcerns": [],\n    "recommendations": ["Your post appears safe to share"],\n    "detectedKeywords": []\n}\n    ').concat(s,"\n"),e.p=6,e.n=7,fetch("https://generativelanguage.googleapis.com/v1beta/models/".concat(o.GEMINI_MODEL,":generateContent?key=").concat(o.GEMINI_API_KEY),{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({contents:[{parts:[{text:i}]}]})});case 7:if((c=e.v).ok){e.n=9;break}return e.n=8,c.text();case 8:throw l=e.v,new Error("API request failed: ".concat(c.status," - ").concat(l));case 9:return e.n=10,c.json();case 10:if(u=e.v,f=u.candidates[0].content.parts[0].text,e.p=11,(d=f.trim()).startsWith("```json")?d=d.replace(/^```json\s*/,"").replace(/\s*```$/,""):d.startsWith("```")&&(d=d.replace(/^```\s*/,"").replace(/\s*```$/,"")),(p=JSON.parse(d)).riskLevel&&p.riskyElements){e.n=12;break}throw new Error("Invalid response structure from AI");case 12:return e.a(2,p);case 13:throw e.p=13,m=e.v,console.error("Failed to parse AI response:",f),console.error("Parse error:",m),new Error("AI response could not be parsed as JSON");case 14:throw e.p=14,y=e.v,console.error("Gemini API error:",y),y;case 15:return e.a(2)}},t,null,[[11,13],[6,14],[2,4]])}),r=function(){var e=this,r=arguments;return new Promise(function(o,s){var a=t.apply(e,r);function i(e){n(a,o,s,i,c,"next",e)}function c(e){n(a,o,s,i,c,"throw",e)}i(void 0)})},r.apply(this,arguments)}console.log("Post Guardian service worker loaded!"),chrome.runtime.onInstalled.addListener(function(e){console.log("Post Guardian extension installed:",e.reason),chrome.storage.local.set({cacheStats:{hits:0,misses:0,apiCalls:0,lastReset:Date.now()}})}),chrome.runtime.onMessage.addListener(function(e,t,n){return"ANALYZE_TEXT"===e.type?(function(e){return r.apply(this,arguments)}(e.data).then(function(e){n({success:!0,analysis:e})}).catch(function(e){console.error("Analysis failed:",e),n({success:!1,error:e.message})}),!0):"UPDATE_CACHE_STATS"===e.type?(console.log("Cache stats updated:",e.stats),n({success:!0}),!1):void 0}),chrome.runtime.onStartup.addListener(function(){console.log("Post Guardian extension started")})})();